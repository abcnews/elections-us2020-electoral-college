@import '../../constants.scss';

// TappableLayer enum

$TappableLayer_Delegates: 0;
$TappableLayer_States: 1;

// Stroke widths

$swNone: 0;
$swLight: 1.5;
$swNormal: 2.5;
$swHeavy: 5.5;

// Focus management

$opacityUnfocused: 0.05;
$opacityUnfocusedInspecting: 0.25;
$focusChangeTransitionDuration: 0.25s;

@mixin fadedOutTransitionable {
  transition: opacity $focusChangeTransitionDuration;
}

@mixin fadedOut {
  opacity: $opacityUnfocused;
}

@mixin fadedOutInspecting {
  opacity: $opacityUnfocusedInspecting;
  transition: opacity 0s;
}

// Flip animations

// $flipCubicBezier: cubic-bezier(0.455, 0.03, 0.515, 0.955); // easeInOutQuad
// $flipCubicBezier: cubic-bezier(0.645, 0.045, 0.355, 1); // easeInOutCubic
// $flipCubicBezier: cubic-bezier(0.4, 0.07, 0.09, 0.99); // custom
$flipCubicBezier: cubic-bezier(0.785, 0.135, 0.15, 0.86); // easeInOutCirc

@mixin flipKeyframes($animationName, $colorFrom, $colorTo) {
  @keyframes #{$animationName} {
    0% {
      fill: $color_White;
      stroke: $colorFrom;
      transform: none;
    }
    49.99% {
      fill: $color_White;
      stroke: $colorFrom;
      transform: rotateY(90deg);
    }
    50% {
      fill: $colorTo;
      stroke: none;
      transform: rotateY(-90deg);
    }
    100% {
      fill: $colorTo;
      stroke: none;
      transform: none;
    }
  }
}

@mixin flipAnimation($animationName) {
  animation: $animationName $allocationTransitionDuration $flipCubicBezier 1 both;
}

// Styles

.root {
  position: relative;
  width: 100%;
  height: 0;
  padding: 0;
  /* padding-bottom will be defined by JS */
}

.svg {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
}

.countryOuter {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .countryOuter {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .countryOuter {
  @include fadedOutInspecting;
}

.countryOuter {
  stroke: $color_Grey;
  stroke-width: $swLight;
  fill: none;
}

.countryInner {
  stroke: none;
  fill: rgba(0, 0, 0, 0.025);
}

.delegates {
  pointer-events: none;
}

.root[data-tappable='#{$TappableLayer_Delegates}'] .delegates {
  pointer-events: all;
}

.delegate {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .delegate[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .delegate[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.delegateAllocation {
  color: $color_None;
  fill: currentColor;
  stroke: none;
  stroke-width: $swHeavy; // For flip animation strokes
}

.delegateAllocation[data-allocation='#{$Allocation_Dem}'] {
  color: $color_Dem;
}

.delegateAllocation[data-allocation='#{$Allocation_LikelyDem}'] {
  color: $color_LikelyDem;
}

.delegateAllocation[data-allocation='#{$Allocation_Tossup}'] {
  color: $color_Tossup;
}

.delegateAllocation[data-allocation='#{$Allocation_LikelyGOP}'] {
  color: $color_LikelyGOP;
}

.delegateAllocation[data-allocation='#{$Allocation_GOP}'] {
  color: $color_GOP;
}

@include flipKeyframes(flipGOPToDem, $color_GOP, $color_Dem);

.delegateAllocation[data-relative-allocation='#{$Allocation_GOP}'][data-allocation='#{$Allocation_Dem}'] {
  @include flipAnimation(flipGOPToDem);
}

@include flipKeyframes(flipDemToGOP, $color_Dem, $color_GOP);

.delegateAllocation[data-relative-allocation='#{$Allocation_Dem}'][data-allocation='#{$Allocation_GOP}'] {
  @include flipAnimation(flipDemToGOP);
}

.delegateTarget {
  stroke: none;
  fill: none;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_Delegates}'] .delegateTarget {
  cursor: pointer;
}

.states {
  pointer-events: none;
}

.root[data-tappable='#{$TappableLayer_States}'] .states {
  pointer-events: all;
}

.state {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .state[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .state[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.stateFocus {
  fill: none;
  stroke: $color_Grey;
  stroke-width: $swLight;
}

.stateFocus[data-focus='#{$Focus_Yes}'] {
  stroke: $color_Yes;
  stroke-width: $swHeavy;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-relative-main-allocation='#{$Allocation_Dem}'] {
  stroke: $color_Dem;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-relative-main-allocation='#{$Allocation_GOP}'] {
  stroke: $color_GOP;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-has-definitive-allocation] {
  stroke: none;
  stroke-width: $swNone;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-has-allocation]:not([data-has-definitive-allocation]):not([data-relative-main-allocation]),
.stateFocus[data-focus='#{$Focus_No}'][data-has-allocation] {
  stroke: $color_BG;
  stroke-width: $swNormal;
}

.stateTarget {
  stroke: none;
  fill: none;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_States}'] .stateTarget {
  cursor: pointer;
}

.labels {
  pointer-events: none;
}

.label {
  text-anchor: middle;
  font-size: 1rem;
  fill: $color_Text;
  stroke: none;
  @include fadedOutTransitionable;
}

.label[data-most-definitively-allocated] {
  fill: $color_BG;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.root[data-has-focuses] .label[data-focus='#{$Focus_No}'] {
  @include fadedOut;
  fill: $color_Text;
  text-shadow: none;
}

.root[data-has-focuses][data-is-inspecting] .label[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
  opacity: 1;
}
