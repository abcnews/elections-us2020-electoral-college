@import '../../constants.scss';

// TappableLayer enum

$TappableLayer_Delegates: 0;
$TappableLayer_States: 1;

// Focus management

$opacityUnfocused: 0.05;
$opacityUnfocusedInspecting: 0.5;
$focusChangeTransitionDuration: 0.5s;

@mixin fadedOutTransitionable {
  transition: opacity $focusChangeTransitionDuration;
}

@mixin fadedOut {
  opacity: $opacityUnfocused;
}

@mixin fadedOutInspecting {
  opacity: $opacityUnfocusedInspecting;
  transition: opacity 0s;
}

// Flip animations

@mixin flipKeyframes($animationName, $colorFrom, $colorTo) {
  @keyframes #{$animationName} {
    0% {
      fill: $color_White;
      stroke: $colorFrom;
      transform: none;
    }
    49.99% {
      fill: $color_White;
      stroke: $colorFrom;
      transform: rotateY(90deg);
    }
    50% {
      fill: $colorTo;
      stroke: none;
      transform: rotateY(-90deg);
    }
    100% {
      fill: $colorTo;
      stroke: none;
      transform: none;
    }
  }
}

@mixin flipAnimation($animationName) {
  animation: $animationName $allocationTransitionDuration linear 1 both;
}

// Styles

.root {
  position: relative;
  width: 100%;
  height: 0;
  padding: 0;
  /* padding-bottom will be defined by JS */
}

@media (orientation: landscape) and (max-height: 50rem) {
  .root {
    padding-bottom: 0 !important;
    height: 32rem;
  }
}

@media (orientation: landscape) and (max-height: 25rem) {
  .root {
    padding-bottom: 0 !important;
    height: 16rem;
  }
}

.svg {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
}

.countryOuter {
  stroke: $color_Grey;
  stroke-width: $swLight;
  fill: none;
  @include fadedOutTransitionable;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.root[data-has-focuses] .countryOuter {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .countryOuter {
  @include fadedOutInspecting;
}

.countryInner {
  stroke: none;
  fill: rgba(0, 0, 0, 0.025);
}

.delegates {
  pointer-events: none;
  shape-rendering: crispEdges;
}

.root[data-tappable='#{$TappableLayer_Delegates}'] .delegates {
  pointer-events: all;
}

.delegate {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .delegate[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .delegate[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.delegateAllocation {
  fill: $color_None;
  stroke: none;
  stroke-width: $swHeavy;
  transition: fill $allocationTransitionDuration;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.delegateAllocation[data-allocation='#{$Allocation_Dem}'] {
  fill: $color_Dem;
}

.delegateAllocation[data-allocation='#{$Allocation_LikelyDem}'] {
  fill: $color_LikelyDem;
}

.delegateAllocation[data-allocation='#{$Allocation_Tossup}'] {
  fill: $color_Tossup;
}

.delegateAllocation[data-allocation='#{$Allocation_LikelyGOP}'] {
  fill: $color_LikelyGOP;
}

.delegateAllocation[data-allocation='#{$Allocation_GOP}'] {
  fill: $color_GOP;
}

@include flipKeyframes(flipGOPToDem, $color_GOP, $color_Dem);

.delegateAllocation[data-relative-allocation='#{$Allocation_GOP}'][data-allocation='#{$Allocation_Dem}'] {
  @include flipAnimation(flipGOPToDem);
}

@include flipKeyframes(flipDemToGOP, $color_Dem, $color_GOP);

.delegateAllocation[data-relative-allocation='#{$Allocation_Dem}'][data-allocation='#{$Allocation_GOP}'] {
  @include flipAnimation(flipDemToGOP);
}

.delegate[data-flip-direction='ltr'][data-ltr-index='1'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='1'] .delegateAllocation {
  animation-delay: 0.025s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='2'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='2'] .delegateAllocation {
  animation-delay: 0.05s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='3'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='3'] .delegateAllocation {
  animation-delay: 0.075s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='4'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='4'] .delegateAllocation {
  animation-delay: 0.1s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='5'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='5'] .delegateAllocation {
  animation-delay: 0.125s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='6'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='6'] .delegateAllocation {
  animation-delay: 0.15s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='7'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='7'] .delegateAllocation {
  animation-delay: 0.175s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='8'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='8'] .delegateAllocation {
  animation-delay: 0.2s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='9'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='9'] .delegateAllocation {
  animation-delay: 0.225s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='10'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='10'] .delegateAllocation {
  animation-delay: 0.25s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='11'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='11'] .delegateAllocation {
  animation-delay: 0.275s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='12'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='12'] .delegateAllocation {
  animation-delay: 0.3s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='13'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='13'] .delegateAllocation {
  animation-delay: 0.325s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='14'] .delegateAllocation,
.delegate[data-flip-direction='ltr'][data-ltr-index='14'] .delegateAllocation {
  animation-delay: 0.35s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='15'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='15'] .delegateAllocation {
  animation-delay: 0.375s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='16'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='16'] .delegateAllocation {
  animation-delay: 0.4s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='17'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='17'] .delegateAllocation {
  animation-delay: 0.425s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='18'] .delegateAllocation,
.delegate[data-flip-direction='rtl'][data-rtl-index='18'] .delegateAllocation {
  animation-delay: 0.45s;
}

.delegate[data-flip-direction='ltr'][data-ltr-index='19'] .delegateAllocation,
.delegate[data-flip-direction='ltr'][data-ltr-index='19'] .delegateAllocation {
  animation-delay: 0.475s;
}

.delegateTarget {
  stroke: none;
  fill: none;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_Delegates}'] .delegateTarget {
  cursor: pointer;
}

.states {
  pointer-events: none;
}

.root[data-tappable='#{$TappableLayer_States}'] .states {
  pointer-events: all;
}

.state {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .state[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .state[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.stateFocus {
  fill: none;
  stroke: $color_Grey;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.stateFocus[data-focus='#{$Focus_No}'][data-has-allocation] {
  stroke: $color_BG;
}

.stateFocus[data-focus='#{$Focus_Yes}'] {
  stroke: $color_Yes;
  stroke-width: $swHeavy;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-relative-main-allocation='#{$Allocation_Dem}'] {
  stroke: $color_Dem;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-relative-main-allocation='#{$Allocation_GOP}'] {
  stroke: $color_GOP;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-has-definitive-allocation] {
  stroke: none;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-main-allocation='#{$Allocation_Dem}'][data-relative-main-allocation='#{$Allocation_Dem}'] {
  stroke: $color_Dem;
}

.stateFocus[data-focus='#{$Focus_Yes}'][data-main-allocation='#{$Allocation_GOP}'][data-relative-main-allocation='#{$Allocation_GOP}'] {
  stroke: $color_GOP;
}

.stateTarget {
  stroke: none;
  fill: none;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_States}'] .stateTarget {
  cursor: pointer;
}

.statesPartitions {
  pointer-events: none;
  opacity: 0;
}

.root[data-has-focuses] .statesPartitions {
  opacity: 1;
}

.statePartition {
  fill: none;
  stroke: none;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.statePartition[data-focus='#{$Focus_Yes}'],
.statePartition[data-focus='#{$Focus_No}'][data-relative-main-allocation='#{$Allocation_Dem}'],
.statePartition[data-focus='#{$Focus_No}'][data-relative-main-allocation='#{$Allocation_GOP}'] {
  stroke: $color_BG;
}

.root[data-has-focuses] .statePartition[data-focus='#{$Focus_No}'] {
  stroke: none;
}

.labels {
  pointer-events: none;
}

.label {
  text-anchor: middle;
  font-size: 1rem;
  @include fadedOutTransitionable;

  @media (max-width: 667px) {
    transform: translate(0, 0.25rem);
    font-size: 1.5rem;
  }
}

.root[data-has-focuses] .label[data-focus='#{$Focus_No}'] {
  opacity: 0;
}

.root[data-has-focuses][data-is-inspecting] .label[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
  opacity: 1;
}

.label > * {
  text-anchor: middle;
  font-size: 1.5rem;

  @media (min-width: 668px) {
    font-size: 1rem;
  }
}

.labelOutline {
  fill: none;
  stroke: $color_BG;
  stroke-opacity: 0.5;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: $swHeavy_SM;

  .label[data-is-partially-allocated] & {
    @media (min-width: 668px) {
      stroke-width: $swHeavy;
    }
  }
}

.label[data-main-allocation='#{$Allocation_Dem}'] > .labelOutline,
.label[data-main-allocation='#{$Allocation_GOP}'] > .labelOutline,
.label[data-main-allocation='#{$Allocation_Tossup}'] > .labelOutline {
  stroke-opacity: 0.25;
  stroke: $color_Text;
}

.label:not([data-is-partially-allocated]) .labelOutline {
  @media (min-width: 668px) {
    stroke: none !important;
  }
}

.labelText {
  fill: $color_Text;
}

.label[data-main-allocation='#{$Allocation_Dem}'] > .labelText,
.label[data-main-allocation='#{$Allocation_GOP}'] > .labelText,
.label[data-main-allocation='#{$Allocation_Tossup}'] > .labelText {
  fill: $color_BG;
}
